var async = require('async');

Array.prototype.forEachThen = function(iteratorFunction, thenFunction) {
    // function forEachThen(array, iteratorFunction, thenFunction) {
    var call = []
    var count = -1;
    this.forEach(function(e) {
        call.push(function(callback) {

            iteratorFunction(callback, e, ++count);


        });
    });
    async.parallel(call, function(err, result) {
        return thenFunction(err, result);
    });
}
Array.prototype.forEachThenSeries = function(iteratorFunction, thenFunction) {
    // function forEachThen(array, iteratorFunction, thenFunction) {
    var call = []
    var count = -1;
    this.forEach(function(e) {
        call.push(function(callback) {
            iteratorFunction(callback, e, ++count);
        });
    });
    async.series(call, function(err, result) {
        return thenFunction(err, result);
    });
}

module.exports.ObejctForEachThenSeries = function(object, iteratorFunction, thenFunction) {
    // function forEachThen(array, iteratorFunction, thenFunction) {
    var call = []
    var count = -1;
    var array = object
    Object.keys(array).forEach(function(e) {
        call.push(function(callback) {
            iteratorFunction(callback, e, array[e], count++);
        });
    });
    async.series(call, function(err, result) {
        return thenFunction(err, result);
    });
}

module.exports.ObjectForEachThen  = function(object, iteratorFunction, thenFunction) {
    // function forEachThen(array, iteratorFunction, thenFunction) {
    var call = []
    var count = 0;
    var array = object
    Object.keys(array).forEach(function(e) {
        call.push(function(callback) {
            iteratorFunction(callback, e, array[e], count++);

        });
    });
    async.parallel(call, function(err, result) {
        return thenFunction(err, result);
    });
}
//
module.exports.ObjectForEach = function(object,iteratorFunction) {
    // function forEachThen(array, iteratorFunction, thenFunction) {
    var call = []
    var count = 0;
    var array = object
    Object.keys(array).forEach(function(e) {

        iteratorFunction(e, array[e], count++);


    });
}

